# THE MOTHER OF ALL DOTFILES

# PROMPT

	source ~/.dotfiles/lib/git-prompt.sh
	source ~/.dotfiles/lib/git-completion.bash
	PS1='\u@\[\e[0;35m\]\h:\[\e[0;36m\]\w\[\e[0;32m\]$(__git_ps1 " [%s]")\[\e[m\]$'
	# MAC VERSION:
	# export PS1='\u@\[\e[0;35m\]$(scutil --get ComputerName):\[\e[0;36m\]\w\[\e[0;32m\]$(__git_ps1 " [%s]")\[\e[m\]$'	
	
# COLORS

	# Tell ls to be colourful
	export CLICOLOR=1
	
	# Tell grep to highlight matches
	export GREP_OPTIONS='--color=auto'

	export LS_COLORS='no=33:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=0131:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# SHORTCUTS

	alias r='rm -Rf'
	alias x=exit
	alias t=touch
	alias cl=clear
	alias sym='ln -s'
	alias his=history
		
	alias dotfiles='d ~/.dotfiles'
	alias dot=dotfiles
	alias profile='vim ~/.bash_profile'	
	alias pro=profile
	alias reload='source ~/.bash_profile'
	alias re=reload
		
	# MAKE FOLDER AND ENTER IT
	function m() {
		mkdir -p "$@" && cd "$@"
	}

	alias config='v config'
	alias readme='vim README.md'	
	
# DIRECTORY HELPERS

	function l() {
		echo "";
		ls -halF --color=auto;
		echo "";
	}
	
	# MAC VERSION:
	# function l() { echo ""; ls -halFG; echo -e "" }
		
	function d() {
	
		PATTERNS=(
			"$1"
			".$1"
			"$1.git"
			"$1.dev"
			"$1.new"
			"$1.prod"
			"$1.master"
			"$1.dylan"
			"$1.tmp"
			"$1.bak"
			"$1.com"						
			"$1.net"						
			"$1.org"						
			"$1.co"						
			"$1.me"						
			"$1.is"
			"$1.info"			
		)
	
		if [ $# -ge 1 ] ; then
		
			for FOLDER in ${PATTERNS[@]}
			do
				if [ -d $FOLDER ] ; then
					cd $FOLDER
					l
					return
				fi
			done
		
		fi
			
		e $1
		
	}
	
	alias ~='d ~'

	alias ..='d ..'
	alias cd..='d ..'
	alias ...='d ../../../'
	alias ....='d ../../../../'
	alias .....='d ../../../../'
	alias .4='d ../../../../'
	alias .5='d ../../../../..'
	alias ,='d /'
	
	function cd/() {
		d /
	}
	
	# OVERRIDE COMMAND-NOT-FOUND ON UBUNTU/UNIX
	function command_not_found_handle {
		d $@		
	}	
		
	# OVERRIDE COMMAND-NOT-FOUND ON MAC
	# trap 'if ! type -t $BASH_COMMAND >/dev/null; then d $BASH_COMMAND; fi' DEBUG
	
	
# SMARTFILE HELPER

	function smartfile() {
	
		PATTERNS=(
			"$2"
			"$2.js"
			"$2.json"
			"$2.ejs"
			"$2.md"
			"$2.txt"
			"$2.log"
			"$2.php"
			"$2.css"
			"$2.html"
			"$2.sh"
			"$2.haml"
			"$2.less"
			"$2.scss"
			"$2.xml"
			"$2.sample"
			".$2"
		)
		
		DEFAULTS=(
			"README.md"
			"package.json"
			"index.php"
			"index.js"
			"index.ejs"
			"app.js"
			"index.haml"
			"readme.txt"
			"config"
			"post-receive"
			".gitconfig"
			".profile"
			".bash_profile"
			".bashrc"
		)
		
		# FIGURE OUT WHICH LIST TO CHECK THROUGH
		if [ $# -ge 2 ] ; then	
			LIST=${PATTERNS[@]}
			ORIGINAL="$2"
		else
			LIST=${DEFAULTS[@]}
			ORIGINAL="File"
		fi
		
		# TRY TO ACT ON FILE
		try_files "$1" "$ORIGINAL" "${LIST[@]}"		
		
	}
	
	function try_files() {

		ACTION=${1}
		shift

		ORIGINAL=${1}
		shift

		COLLECTION=${@}
		
		for FILENAME in $COLLECTION
		do
			if [ -f $FILENAME ] ; then
				eval $ACTION $FILENAME
				return 1
			fi
		done
				
		echo "ERROR: $ORIGINAL not found!"
		return 0
					
	}	
	
# ECHO HELPER

	function e() {
		echo ""	
		echo -en "\033[1m"
		
		smartfile 'cat' $*
		
		# IF SUCCESSFUL, PRINT EXTRA LINE BREAK
		status=$?		
	    if [ $status -gt 0 ]; then
	        echo ""
	    fi
		
		echo -en "\033[0m"
		echo ""
	}
	
# VIM HELPER

	function v() {

		smartfile 'vim' $*

	}
	
# CREATE BACKUP OF FILE

	function bu() {
	    cp $1 `basename $1`-`date +%Y%m%d%H%M`.bak ;
	}
	
# EXTRACT ARCHIVE

	function extract () {
	        if [ -f $1 ] ; then
	                case $1 in
	                        *.tar.bz2)       tar xjf $1                	;;
	                        *.tar.gz)        tar xzf $1                	;;
	                        *.bz2)           bunzip2 $1               	;;
	                        *.rar)           rar x $1                	;;
	                        *.gz)            gunzip $1                	;;
	                        *.tar)           tar xf $1                	;;
	                        *.tbz2)          tar xjf $1                	;;
	                        *.tgz)           tar xzf $1                	;;
	                        *.zip)           unzip $1                	;;
	                        *.Z)             uncompress $1        		;;
	                        *)               echo "'$1' cannot be extracted via extract()" ;;
	                esac
	        else
	                echo "'$1' is not a valid file"
	        fi
	}
	
# CALCULATOR

	function calc() {
		local result=""
		result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
		#                       └─ default (when `--mathlib` is used) is 20
		#
		if [[ "$result" == *.* ]]; then
			# improve the output for decimal numbers
			printf "$result" |
			sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
			    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
			    -e 's/0*$//;s/\.$//'   # remove trailing zeros
		else
			printf "$result"
		fi
		printf "\n"
	}

# GET FILE/DIR SIZE

	function fs() {
		if du -b /dev/null > /dev/null 2>&1; then
			local arg=-sbh
		else
			local arg=-sh
		fi
		if [[ -n "$@" ]]; then
			du $arg -- "$@"
		else
			du $arg .[^.]* *
		fi
	}	
	
# BASH HELPER

	function b() {
		bash $1.sh ${*:2}
	}
	
# MISC STUFF		
		
	# List only directories
	alias lsd='ls -l ${colorflag} | grep "^d"'
	
	# Enable aliases to be sudo’ed
	alias sudo='sudo '
	
	# Flush Cache
	alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

	# Recursively delete `.DS_Store` files
	alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

	# See 5 Biggest Files
	alias findbig="find . -type f -exec ls -s {} \; | sort -n -r | head -5"
	
	# Trim new lines and copy to clipboard
	alias clip="tr -d '\n' | pbcopy"

# AUTOMATICALLY INCLUDE OTHER DOTFILES

	# for f in ~/.dotfiles/*; do
	# 	if [ -f $f ] && [[ ! $f =~ "/dotfile" ]] && [[ ! $f =~ "README" ]]; then
	# 	   	source $f
	# 	fi
	# done
	
# DOTFILE SHORTCUTS

	alias dotfile="vim ~/.dotfiles/dotfile"
	alias gitfile="vim ~/.dotfiles/gitfile"
	alias nodefile="vim ~/.dotfiles/nodefile"

	alias dfile=dotfile
	alias gfile=gitfile
	alias nfile=nodefile