# ECHO HELPER

	function e() {
		echo ""	
		echo -en "\033[1m"

		if ls $1.* &> /dev/null; then
		
			if [ -f README.md ] ; then
				cat README.md
			elif [ -f package.json ] ; then
				cat package.json
			elif [ -f index.php ] ; then
				cat index.php
			elif [ -f index.html ] ; then
				cat index.html
			fi
				
		elif [ -f ./$1.js ] ; then
		    cat $1.js
		elif [ -f ./$1.json ]; then
			cat $1.json		
		elif [ -f ./$1.md ]; then
			cat $1.md		
		elif [ -f ./$1.txt ]; then
			cat $1.txt		
		elif [ -f ./$1.php ]; then
			cat $1.txt		
		elif [ -f ./$1.css ]; then
			cat $1.txt		
		elif [ -f ./$1.html ]; then
			cat $1.txt		
		elif [ -f ./$1.sh ]; then
			cat $1.txt	
		elif [ -f ./$1.xml ]; then
			cat $1.txt						
		else
			cat $*
		fi
		echo -en "\033[0m"
		echo ""
		echo ""
	}

# CREATE BACKUP OF FILE

	function bu() {
	    cp $1 `basename $1`-`date +%Y%m%d%H%M`.backup ;
	}
	
# EXTRACT ARCHIVE

	function extract () {
	        if [ -f $1 ] ; then
	                case $1 in
	                        *.tar.bz2)       tar xjf $1                	;;
	                        *.tar.gz)        tar xzf $1                	;;
	                        *.bz2)           bunzip2 $1               	;;
	                        *.rar)           rar x $1                	;;
	                        *.gz)            gunzip $1                	;;
	                        *.tar)           tar xf $1                	;;
	                        *.tbz2)          tar xjf $1                	;;
	                        *.tgz)           tar xzf $1                	;;
	                        *.zip)           unzip $1                	;;
	                        *.Z)             uncompress $1        		;;
	                        *)               echo "'$1' cannot be extracted via extract()" ;;
	                esac
	        else
	                echo "'$1' is not a valid file"
	        fi
	}
	
# CALCULATOR

	function calc() {
		local result=""
		result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
		#                       └─ default (when `--mathlib` is used) is 20
		#
		if [[ "$result" == *.* ]]; then
			# improve the output for decimal numbers
			printf "$result" |
			sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
			    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
			    -e 's/0*$//;s/\.$//'   # remove trailing zeros
		else
			printf "$result"
		fi
		printf "\n"
	}

# MAKE NEW DIR AND ENTER IT

	function mkd() {
		mkdir -p "$@" && cd "$@"
	}

# GET FILE/DIR SIZE

	function fs() {
		if du -b /dev/null > /dev/null 2>&1; then
			local arg=-sbh
		else
			local arg=-sh
		fi
		if [[ -n "$@" ]]; then
			du $arg -- "$@"
		else
			du $arg .[^.]* *
		fi
	}

# QUICK HTTP SERVER
# start an HTTP server from a directory, optionally specifying the port

	function server() {
		local port="${1:-8000}"
		sleep 1 && open "http://localhost:${port}/" &
		# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
		# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
	}
	
# QUICK PHP SERVER
# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
	
	function phpserver() {
		local port="${1:-4000}"
		local ip=$(ipconfig getifaddr en1)
		sleep 1 && open "http://${ip}:${port}/" &
		php -S "${ip}:${port}"
	}
	
# DELETE MAC TRASH AND DOWNLOADS

	function trash() {
		rm -rf ~/.Trash/*
		rm -rf ~/Downloads/*
	}

# SEE 5 BIGGEST FILES

alias findbig="find . -type f -exec ls -s {} \; | sort -n -r | head -5"

# CLEAR HISTORY AND SCREEN

alias hcl='history -c; clear'
	