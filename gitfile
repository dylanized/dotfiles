# GIT HELPERS!

	# QUICK CHECKOUT
	alias gco='git checkout'
	
	# QUICK ADD
	function ga() {
		git add $*
	}

	# ADD ALL CHANGED AND NEW FILES
	function gaa() {
		git add -A
	}
	
	# QUICK COMMIT
	function gc() {
		echo -e "\033[1m"
		git commit -m "$*"
		echo -e "" 
	}
	
	# ADD TRACKED CHANGES, THEN COMMIT
	function gac() {
		echo -e "\033[1m"
		git commit -am "$*"
		echo -e ""
	}
	
	# ADD TRACKED CHANGES, COMMIT, THEN PUSH
	function gacp() {
		echo -e "\033[1m"
		git commit -am "$*"	
		git push
		echo -e ""
	}
	
	# ADD ALL CHANGES, THEN COMMIT	
	function c() {
		echo -e "\033[1m"
		git add -A
		git commit -m "$*"
		echo -e ""
	}	

	#  ADD ALL CHANGES, COMMIT, THEN PUSH	
	function p() {
		echo -e "\033[1m"
		git add -A
		git commit -m "$*"
		git push
		echo -e ""
	}
		
	alias gp='git push'
	
	alias gpo='git push origin'
	
	alias push='git push'
	alias pull='git pull'
	
	function gpa() {
		echo -e "\033[1m"
		git add -A
		git commit -m "$*"
		git push all master	
		echo -e ""
	}
	
	alias gd='git diff'		
	alias gb='git branch'
	alias gs='git status -sb' # upgrade your git if -sb breaks for you. it's fun.
	#alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
	alias gm="git merge"
	alias gmv='git mv $*'
	alias gr='git remote'
	alias gf='git fetch'
	alias grm='git rm'
	alias gra='git remote add'
	alias grao='git remote add origin'
		
	function gi() {
		echo -e "\033[1m"
		git init
		git add *
		git commit -m "initial commit"
		echo -e ""
	}
	
	alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
	
	alias undo="git revert HEAD"
	alias greset="git reset"		# unstages commits
	alias ghard="git reset --hard"	# unstages commits and rolls back working tree
	
	alias gitconfig="vim .gitconfig"
	alias gitignore="vim .gitignore"
	alias gconfig=gitconfig
	alias gignore=gitignore
	
# GIT FLOW HELPERS

	alias gfi='git flow init'
	alias gfs='git flow feature start $1'
	alias gff='git flow feature finish $1'
		
# EXPORT GIT TO TEMP FOLDER
	
	function gx() {
		echo -e "\033[1m"
	   	GXFOLDER=temp
       	if [ $1 ]; then
            GXFOLDER=$1
        fi	
		rm -rf $GXFOLDER
		mkdir $GXFOLDER
		git archive --format=tar master | (cd $GXFOLDER/ && tar -xf -)
		echo -e ""
	}

# EXPORT GIT AND UPLOAD TO FTP FOLDER
# pass in ssh server + folder path
	
	function gxp() {
		echo -e "\033[1m"
		if [ $# -gt 0  ]; then
			GXPFOLDER=temp
			gx
			rsync -e ssh -av $GXPFOLDER/ $1:$2 --delete
			rm -rf $GXPFOLDER
		else
			echo "ERROR: Missing SSH server or folder path!"
			echo "Ex: gxp yourserver.com somefolder/subfolder"
		fi
		echo -e ""
	}
	
# CREATE BARE REPO
# First argument is repo name, second argument is path to working tree

	function bare() {
		
		echo -e "\033[1m"
	
		if [ $# = 2 ]; then
		
			echo "Creating repo folder $1.git..."
			mkdir $1.git
			
			echo "Setting up bare repo..."
			cd $1.git
			git init --bare .
			
			echo "Adding deployment hook..."
			cd hooks
			
			cat >post-receive <<EOF
#!/bin/sh
GIT_WORK_TREE=$2 git checkout -f
EOF

			chmod +x post-receive
			cd ..
			
			echo "Creating working tree folder $2"
			mkdir $2
			
			cd ..
			echo "Done! Push to the repo to export the working tree"		
			
		else
		
			echo "Please provide repo name and working tree path (from the repo)"
			echo "EX: bare sample_repo ../../sample_repo.dev"
			
		fi
		
		echo -e ""
		
	}	
