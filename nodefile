# Aliases

	alias ni="npm install --save"
	alias nid="npm install --save-dev"
	alias nr="npm run"
	alias nrs="npm start"
	alias nrd="npm run dev"	
	alias ng="sudo npm install -g"
	alias nv="node --version"
	alias nu="npm update"	
	
	alias bi="bower install"
	alias bu="bower update"

	alias gr=grunt
	alias grs='grunt serve'
	alias snl='sudo npm link'
	alias nm='d node_modules'
	alias np='npm publish ./'
	alias nd='n --debug'
	
	alias mo=mocha
	alias mog='mocha --grep'
	alias cc='conventional-changelog -p angular -i CHANGELOG.md -w'
	alias ccall='conventional-changelog -p angular -i CHANGELOG.md -w -r 0'
	alias rlog='rm *.log'
	alias rl=rlog
	
	alias vu='vagrant up'	
	alias vh='vagrant halt'
	alias vd='vagrant destroy'
	alias vs='vagrant ssh'
	alias vp='vagrant provision'
	alias vbu='vagrant box update'	
	
	function n() {
		echo ""	
		echo -en "\033[1m"
		
		FILENAME=""
		
		if [ $1 ] ; then
			# ARGUMENT(S) GIVEN	
			if [[ "$1" != *.js* ]] ; then
				FILENAME="$1.js"
			elif [[ "$1" == *--* ]] ; then
				FILENAME="app.js $1"
			else
				FILENAME=$1
			fi
			shift
		elif [ -f app.js ]; then
			# NO ARGUMENTS, RUN APP.JS
			FILENAME="app.js"
		elif [ -f index.js ]; then
			# NO ARGUMENTS, RUN INDEX.JS
			FILENAME="index.js"
		fi
		
		if [[ $1 = "debug" || $1 = "--debug" ]]; then
			node-debug $FILENAME ${@}			
		elif [[ $FILENAME ]]; then
			node $FILENAME ${@}
		else
			echo "ERROR: script not found"
		fi
				
		echo -en "\033[0m"
		echo ""		
		
	}
	
	function nvu() {
		COMMAND="nvm use v"
		COMMANDVER=$COMMAND$1
		$COMMANDVER
	}	
	
	function nt() {
		if [[ "$1" == "--all" || "$1" == "-a" ]]; then
			npm run mocha -- test/[^_]*.js
		elif [[ "$2" == "--all" || "$2" == "-a" ]]; then
			npm run mocha -- test/$1*.js
		elif [[ "$1" ]]; then
			npm run mocha -- test/$1*.js --bail
		else
			npm run mocha -- test/[^_]*.js --bail
		fi
	}

# NVM setup

	[[ -s ~/.nvm/nvm.sh ]] && . ~/.nvm/nvm.sh # This loads NVM	
	[[ -s ~/.nvm/bash_completion ]] && . ~/.nvm/bash_completion # This loads NVM

# NPM completion

	if npm -v >/dev/null 2>&1; then
	. <(npm completion)
	fi
	
	###-begin-npm-completion-###
	#
	# npm command completion script
	#
	# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
	# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
	#
	
	COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
	COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
	export COMP_WORDBREAKS
	
	if type complete &>/dev/null; then
	_npm_completion () {
	local si="$IFS"
	IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
	                       COMP_LINE="$COMP_LINE" \
	                       COMP_POINT="$COMP_POINT" \
	                       npm completion -- "${COMP_WORDS[@]}" \
	                       2>/dev/null)) || return $?
	IFS="$si"
	}
	complete -F _npm_completion npm
	elif type compdef &>/dev/null; then
	_npm_completion() {
	si=$IFS
	compadd -- $(COMP_CWORD=$((CURRENT-1)) \
	             COMP_LINE=$BUFFER \
	             COMP_POINT=0 \
	             npm completion -- "${words[@]}" \
	             2>/dev/null)
	IFS=$si
	}
	compdef _npm_completion npm
	elif type compctl &>/dev/null; then
	_npm_completion () {
	local cword line point words si
	read -Ac words
	read -cn cword
	let cword-=1
	read -l line
	read -ln point
	si="$IFS"
	IFS=$'\n' reply=($(COMP_CWORD="$cword" \
	                   COMP_LINE="$line" \
	                   COMP_POINT="$point" \
	                   npm completion -- "${words[@]}" \
	                   2>/dev/null)) || return $?
	IFS="$si"
	}
	compctl -K _npm_completion npm
	fi
	###-end-npm-completion-###
